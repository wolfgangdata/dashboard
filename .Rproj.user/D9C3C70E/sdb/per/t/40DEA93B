{
    "collab_server" : "",
    "contents" : "## server.R ##\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(leaflet)\n\n# data_col <- read.csv(\"data/data_col.csv\", header=T, sep = \",\")\ndata_col <- read.csv(\"data/col_merged_01_02_03.csv\", header=T, sep = \",\")\nmeta_deploy <- read.csv(\"data/meta_deployments.csv\", header=T, sep = \",\", stringsAsFactors = F)\nmeta_deploy <- meta_deploy[-1, ]\nmeta_col <- read.csv(\"data/meta_sampleID.csv\", header=T, sep = \",\", stringsAsFactors = F)\n\n# # rename deployments\n# data_col$deployment_name[data_col$deployment == \"1\"] <- meta_deploy$Country[meta_deploy$ID == \"1\"]\n# data_col$deployment_name[data_col$deployment == \"2\"] <- meta_deploy$Country[meta_deploy$ID == \"2\"]\n\n# add sample names and variables\n# data_col <- left_join(data_col, meta_col, by = c(\"col_sample_type\" = \"ID\"))\n\n# deployments <- sort(unique(as.character(data_col$deployment_name)))\n# deployments1 <- sort(unique(as.character(data_col$deployment_name)))\n\n\n\nserver <- function(input, output, session) {\n        \n        # session$onSessionEnded(function() {\n        #         stopApp()\n        # })\n        \n        \n        data_col <- left_join(data_col, meta_col[, 1:2], by = c(\"col_sample_type\" = \"ID\"))\n        \n        observe({\n                updateRadioButtons(session, \"deployments\", choices=c(\"Cambodia\" = 1,\n                                                                     \"Bangladesh\" = 2,\n                                                                     \"Ghana\" = 3))\n        })\n        \n        \n# **************************************************************************************************          \n        output$hist <- renderPlotly({\n                # dfhist <- count(data_col[data_col$deployment_name == input$deployments, ], col_sample_type)\n                # \n                # dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))\n                # dfhist2$col_sample_type <- 1:10\n                # dfhist <- left_join(dfhist2, dfhist, by = \"col_sample_type\")\n                # dfhist$n[is.na(dfhist$n)] <- 0\n                # dfhist <- left_join(dfhist, meta_col, by = c(\"col_sample_type\" = \"ID\"))\n                # dfhist$sample_type_name <- factor(dfhist$sample_type_name, levels = unique(dfhist$sample_type_name)[order(dfhist$col_sample_type)])\n                # \n                p <- plot_ly(data_col[data_col$dply_num == input$deployments, ], \n                             x = ~col_sample_type, \n                             type = 'histogram') %>%\n                        layout(showlegend = F,\n                               xaxis = list(range = c(0,10),\n                                            title = \"\")) \n                \n                })\n# **************************************************************************************************                                \n        output$map <- renderLeaflet(\n                leaflet(meta_deploy) %>% \n                        addTiles() %>% \n                        addMarkers(lng = ~long,\n                                   lat = ~lat, \n                                   label = paste0(meta_deploy$City, \", \", meta_deploy$Country),\n                                   popup = ~Country,\n                                   options = markerOptions(draggable = F, riseOnHover = TRUE))\n        )\n# **************************************************************************************************                                \n        output$table <- renderTable(as.data.frame(count(data_col[data_col$dply_num == input$deployments, ], \n                                                        sample_type_name)))\n        \n        data_col_depl <- data.frame(table(data_col$dply_num))\n        data_col_depl$Var1 <- as.numeric(as.character(data_col_depl$Var1))\n        data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c(\"Var1\" = \"ID\"))\n        \n        \n        output$testpie <- renderPlotly(\n                pie <- plot_ly(data_col_depl, values = ~Freq, labels = ~Country, type = \"pie\")\n        )\n        \n        \n        \n        \n        \n        \n        \n        \n}",
    "created" : 1516991821609.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2673728380",
    "id" : "40DEA93B",
    "lastKnownWriteTime" : 1520266890,
    "last_content_update" : 1520266890600,
    "path" : "H:/GitHub/dashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}