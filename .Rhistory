shiny::runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("plotly")
shiny::runApp()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages('plotly_4.7.1.zip', lib='C:/Users/wmairin/Downloads/plotly_4.7.1.zip',repos = NULL)
install.packages('plotly_4.7.1.zip', lib='C:/Users/wmairin/Downloads/plotly_4.7.1.zip')
install.packages("plotly")
install.packages("plotly")
library("plotly", lib.loc="~/R/R-3.4.0/library")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
data_col <- read.csv("data/data_col.csv", header=T, sep = ",")
View(data_col)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p %>% config(showLink = F)
runApp()
runApp()
View(data_col)
View(data_col)
runApp()
runApp()
View(data_col)
runApp()
runApp()
View(data_col)
View(data_col)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?validStatuses
?validColors
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
View(data_col)
shiny::runApp()
data_col$deployment
output$testpie <- renderPlotly(
pie <- plot_ly(data_col, values = ~deployment, type = "pie")
)
runApp()
summary(data_col$deployment)
data_col_depl <- table(data_col$deployment)
data_col_depl
data_col_depl <- data.frame(table(data_col$deployment))
data_col_depl
runApp()
View(data_col)
runApp()
data_col$deployment[data_col$deployment == "1"]
data_col$deployment[data_col$deployment == "2"] <- "Bangladesh"
data_col$deployment[data_col$deployment == "1"] <- "Cambodia"
data_col_depl <- data.frame(table(data_col$deployment))
data_col_depl
runApp()
runApp()
runApp()
runApp()
runApp()
deployments <- sort(unique(as.character(data_col$deployment)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- ggplot(data_col[data_col$deployment == input$deployments, ], aes(x=as.factor(col_sample_type))) +
geom_histogram(stat="count") +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_histogram(stat="count") +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_histogram(stat="count", binwidth = NULL) +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_histogram(stat="count", binwidth = 1) +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_histogram(stat="count", binwidth = .76) +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_bar(stat="count", binwidth = .76) +
theme_light()
p <- ggplot(data_col[data_col$deployment == 1, ], aes(x=as.factor(col_sample_type))) +
geom_bar(stat="count") +
theme_light()
p
runApp()
runApp()
count(data_col[data_col$deployment == 1, ], col_sample_type)
library(dplyr)
count(data_col[data_col$deployment == 1, ], col_sample_type)
data_col[data_col$deployment == 1, ]
data_col[data_col$deployment == 1 ]
data_col$col_sample_type[data_col$deployment == 1 ]
View(data_col)
data_col$col_sample_type[data_col$deployment == "Cambodia" ]
count(data_col$col_sample_type[data_col$deployment == "Cambodia" ], col_sample_type)
count(data_col[data_col$deployment == "Cambodia" ], col_sample_type)
count(data_col$col_sample_type[data_col$deployment == "Cambodia", ], col_sample_type)
count(data_col[data_col$deployment == "Cambodia", ], col_sample_type)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_col$col_sample_type <- factor(data_col$col_sample_type, levels = 1:10)
runApp()
runApp()
count(data_col[data_col$deployment == "Cambodia", ], col_sample_type)
p <- count(data_col[data_col$deployment == "Cambodia", ], col_sample_type)
plot(p)
runApp()
runApp()
runApp()
p <- as.data.frame(count(data_col[data_col$deployment == "Cambodia", ], col_sample_type))
View(p)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deployments <- read.csv("data/meta_deployments.csv", header=T, sep = ",")
View(meta_deployments)
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",")
meta_deploy$Country[meta_deploy$ID == "1"]
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy$Country[meta_deploy$ID == "1"]
data_col$deployment[data_col$deployment == "1"] <- meta_deploy$Country[meta_deploy$ID == "1"]
data_col$deployment
data_col$deployment[data_col$deployment == "2"] <- meta_deploy$Country[meta_deploy$ID == "2"]
data_col$deployment
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
View(meta_col)
View(meta_col)
meta_col$Sample.Name[meta_col$ID == "2"]
meta_col$Sample.Name[meta_col$ID == i]
for (i in 1:10){
meta_col$Sample.Name[meta_col$ID == i]
}
print(meta_col$Sample.Name[meta_col$ID == i])
for (i in 1:10){
print(meta_col$Sample.Name[meta_col$ID == i])
}
View(meta_col)
for (i in 1:10){
data_col$col_sample_type[data_col$col_sample_type == "2"] <- meta_col$Sample.Name[meta_col$ID == i]
}
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
for (i in 1:10){
data_col$col_sample_type[data_col$col_sample_type == i] <- meta_col$Sample.Name[meta_col$ID == i]
}
View(data_col)
data_col$deploymentname[data_col$deployment == "1"] <- meta_deploy$Country[meta_deploy$ID == "1"]
View(data_col)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
View(meta_col)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
View(meta_col)
left_join(data_col, meta_col, by = c("col_sample_type" == "ID"))
library(dplyr)
left_join(data_col, meta_col, by = c("col_sample_type" == "ID"))
data_col <- left_join(data_col, meta_col, by = c("col_sample_type" = "ID"))
View(data_col)
deployments <- sort(unique(as.character(data_col$deployment_name)))
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
# rename deployments
data_col$deployment_name[data_col$deployment == "1"] <- meta_deploy$Country[meta_deploy$ID == "1"]
data_col$deployment_name[data_col$deployment == "2"] <- meta_deploy$Country[meta_deploy$ID == "2"]
# add sample names and variables
data_col <- left_join(data_col, meta_col, by = c("col_sample_type" = "ID"))
deployments <- sort(unique(as.character(data_col$deployment_name)))
deployments1 <- sort(unique(as.character(data_col$deployment_name)))
data.frame(table(data_col$deployment))
data_col_depl <- data.frame(table(data_col$deployment_name))
data_col_depl
data.frame(table(data_col$deployment))
View(meta_deploy)
meta_deploy[1:2, ]
meta_deploy[, 1:2 ]
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1 = "ID""))
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1 = "ID"))
observe({
updateRadioButtons(session, "deployments", choices=deployments)
})
observe({
updateRadioButtons(session, "deployments1", choices=deployments)
})
output$plot3 <- renderPlot(
hist(rnorm(input$slider))
)
output$hist <- renderPlotly({
p <- count(data_col[data_col$deployment == input$deployments, ], col_sample_type) %>%
plot_ly(x = ~col_sample_type, y = ~n, type = 'bar')
# p <- ggplot(data_col[data_col$deployment == input$deployments, ], aes(x=as.factor(col_sample_type))) +
#         geom_bar(stat="count") +
#         theme_light()
ggplotly(p) %>% layout(showlegend = F)
ggplotly(p) %>% config(displayModeBar = F)
})
output$table <- renderTable(as.data.frame(count(data_col[data_col$deployment == input$deployments1, ],
col_sample_type)))
output$testpie <- renderPlotly(
pie <- plot_ly(data_col_depl, values = ~Freq, labels = ~Var1, type = "pie")
)
}
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1" = "ID"))
data_col_depl <- data.frame(table(data_col$deployment))
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1" = "ID"))
data_col_depl$Var1 <- as.numeric(as.character(data_col_depl$Var1))
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1" = "ID"))
data_col_depl
runApp()
runApp()
runApp()
runApp()
runApp()
count(data_col[data_col$deployment_name == input$deployments, ], col_sample_type)
runApp()
runApp()
runApp()
