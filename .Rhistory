layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
g <- list(
showframe = F,
showcoastlines = T,
landcolor = toRGB("grey90"),
projection = list(type = 'Mercator')
)
g1 <- c(
g,
resolution = 50,
showcoastlines = T,
countrycolor = toRGB("white"),
coastlinecolor = toRGB("white"),
projection = list(type = 'Mercator'))
g2 <- c(
g,
showcountries = F,
bgcolor = toRGB("white", alpha = 0),
list(domain = list(x = c(0, .6), y = c(0, .6)))
)
plot_geo(meta_deploy) %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
g2 <- c(
g,
showcountries = T,
bgcolor = toRGB("white", alpha = 0),
list(domain = list(x = c(0, .6), y = c(0, .6)))
)
plot_geo(meta_deploy) %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
g <- list(
showframe = F,
showland = T,
landcolor = toRGB("grey90"),
projection = list(type = 'Mercator')
)
g1 <- c(
g,
resolution = 50,
showcoastlines = T,
countrycolor = toRGB("white"),
coastlinecolor = toRGB("white"),
projection = list(type = 'Mercator'))
g2 <- c(
g,
showcountries = T,
bgcolor = toRGB("white", alpha = 0),
list(domain = list(x = c(0, .6), y = c(0, .6)))
)
plot_geo(meta_deploy) %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
g <- list(
showframe = F,
showland = T,
landcolor = toRGB("grey90"),
projection = list(type = 'Mercator')
)
g1 <- c(
g,
resolution = 50,
showcoastlines = T,
countrycolor = toRGB("white"),
coastlinecolor = toRGB("white"),
projection = list(type = 'Mercator'))
g2 <- c(
g,
showcountries = F,
bgcolor = toRGB("white", alpha = 0),
list(domain = list(x = c(0, .6), y = c(0, .6)))
)
plot_geo(meta_deploy) %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
g1 <- c(
g,
resolution = 50,
showcoastlines = T,
countrycolor = toRGB("white"),
coastlinecolor = toRGB("white"),
projection = list(type = 'Mercator'),
list(lonaxis = list(range = c(-15, -5))),
list(lataxis = list(range = c(0, 12))),
list(domain = list(x = c(0, 1), y = c(0, 1)))
)
g2 <- c(
g,
showcountries = F,
bgcolor = toRGB("white", alpha = 0),
list(domain = list(x = c(0, .6), y = c(0, .6)))
)
plot_geo(meta_deploy) %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
plot_geo(meta_deploy) %>%
locationmode = 'country names', sizes = c(1, 600), color = I("black") %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
plot_geo(meta_deploy) %>%
locationmode = 'country names', sizes = c(1, 600), color = I("black") %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
meta_deploy %>% plot_geo() %>%
locationmode = 'country names', sizes = c(1, 600), color = I("black") %>%
add_trace(
z = ~Year, color = ~Year, colors = 'Blues',
text = ~Country, locations = ~CODE
) %>%
# colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
# title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dfff <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfff$col_sample_type <- 1:10
dff <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dff <- data.frame(dff)
dfhist <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist$col_sample_type <- 1:10
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
View(dfhist)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
View(data_col)
data_col$deployment_name[data_col$deployment == "1"] <- meta_deploy$Country[meta_deploy$ID == "1"]
data_col$deployment_name[data_col$deployment == "2"] <- meta_deploy$Country[meta_deploy$ID == "2"]
data_col <- left_join(data_col, meta_col, by = c("col_sample_type" = "ID"))
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- left_join(dfhist2, dfhist, by = "col_sample_type")
View(dfhist)
plot_ly(dfhist, x = ~col_sample_type, y = ~n, type = 'bar')
ggplotly(p) %>% layout(showlegend = F)
runApp()
is.na(dfhist$n)
is.na(dfhist$n) <- 0
dfhist$n
dfhist[dfhist$n == NA]
dfhist$n[dfhist$n == NA]
dfhist$n[dfhist$n == NA] <- 0
dfhist$n
dfhist[dfhist$n == NA,]
dfhist[is.na(dfhist)] <- 0
dfhist
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- count(data_col[data_col$deployment_name == input$deployments, ], col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- left_join(dfhist2, dfhist, by = "col_sample_type")
dfhist
dfhist$n[is.na(dfhist)]
dfhist$n[is.na(dfhist)] <- 0
dfhist$n[is.na(dfhist$n)]
dfhist$n[is.na(dfhist$n)] <- 0
dfhist$n
p <- plot_ly(dfhist, x = ~col_sample_type, y = ~n, type = 'bar')
p
meta_col
View(data_col)
dfhist <- left_join(dfhist, meta_col, by = c("col_sample_type" = "ID"))
dfhist
plot_ly(dfhist, x = ~sample_type_name, y = ~n, type = 'bar')
runApp()
View(meta_col)
dfhist <- count(data_col[data_col$deployment_name == input$deployments, ], col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist <- count(data_col[data_col$deployment_name == input$deployments, ], col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- left_join(dfhist2, dfhist, by = "col_sample_type")
dfhist$n[is.na(dfhist$n)] <- 0
dfhist <- left_join(dfhist, meta_col, by = c("col_sample_type" = "ID"))
dfhist$sample_type_name <- factor(dfhist$sample_type_name, levels = unique(dfhist$sample_type_name)[order(dfhist$col_sample_type, decreasing = TRUE)])
plot_ly(dfhist, x = ~sample_type_name, y = ~n, type = 'bar')
runApp()
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- left_join(dfhist2, dfhist, by = "col_sample_type")
dfhist <- left_join(dfhist, meta_col, by = c("col_sample_type" = "ID"))
dfhist$sample_type_name <- factor(dfhist$sample_type_name, levels = unique(dfhist$sample_type_name)[order(dfhist$col_sample_type)])
p <- plot_ly(dfhist, x = ~sample_type_name, y = ~n, type = 'bar')
p
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist2 <- as.data.frame(matrix(nrow = 10, ncol = 0))
dfhist2$col_sample_type <- 1:10
dfhist <- left_join(dfhist2, dfhist, by = "col_sample_type")
dfhist <- left_join(dfhist, meta_col, by = c("col_sample_type" = "ID"))
dfhist$n[is.na(dfhist$n)] <- 0
dfhist$sample_type_name <- factor(dfhist$sample_type_name, levels = unique(dfhist$sample_type_name)[order(dfhist$col_sample_type)])
p <- plot_ly(dfhist, x = ~sample_type_name, y = ~n, type = 'bar')
p
dfhist <- count(data_col[data_col$deployment_name == "Cambodia", ] , col_sample_type)
dfhist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
View(meta_deploy)
View(meta_col)
View(data_col)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy
shiny::runApp()
runApp()
View(meta_deploy)
output$map <- renderLeaflet(
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
data = meta_deploy[c(2,7,8), ]
addMarkers(lng = -123.251,
lat = 49.263,
popup = "You are here.",
options = markerOptions(draggable = TRUE, riseOnHover = TRUE))
)
meta_deploy[c(2,7,8), ]
meta_deploy[, c(2,7,8)]
runApp()
runApp()
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
meta_deploy
runApp()
runApp()
meta_deploy[, c(2,4,7,8)]
View(data_col)
data_col <- read.csv("data/merged_col_01_02.csv", header=T, sep = ",")
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
runApp()
leaflet(meta_deploy) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(lng = ~long,
lat = ~lat,
popup = ~City,
options = markerOptions(draggable = F, riseOnHover = TRUE))
runApp()
runApp()
meta_deploy
cities <- c("ACCRA","DHAKA","SIEM REAP")
library(ggmap)
geocode(cities[1])
cities <- c("ACCRA, Ghana","DHAKA","SIEM REAP")
library(ggmap)
geocode(cities[1])
geocode(cities)
cities <- c("ACCRA, Ghana","DHAKA, Bangladesh","SIEM REAP")
library(ggmap)
geocode(cities)
cities <- c("ACCRA, Ghana","Dhaka, Bangladesh","SIEM REAP")
geocode(cities)
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy <- meta_deploy[-1, ]
runApp()
runApp()
leaflet(meta_deploy) %>%
addTiles() %>%
addMarkers(lng = ~long,
lat = ~lat,
label = c(~City, ~Country),
popup = ~City,
options = markerOptions(draggable = F, riseOnHover = TRUE))
leaflet(meta_deploy) %>%
addTiles() %>%
addMarkers(lng = ~long,
lat = ~lat,
label = paste(~City, ~Country),
popup = ~City,
options = markerOptions(draggable = F, riseOnHover = TRUE))
leaflet(meta_deploy) %>%
addTiles() %>%
addMarkers(lng = ~long,
lat = ~lat,
label = paste(City, Country),
popup = ~City,
options = markerOptions(draggable = F, riseOnHover = TRUE))
runApp()
runApp()
runApp()
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
meta_deploy
leaflet(meta_deploy) %>%
addTiles() %>%
addMarkers(lng = ~long,
lat = ~lat,
label = ~City,
popup = ~Country,
options = markerOptions(draggable = F, riseOnHover = TRUE)) %>%
addPolygons(fillColor = ~Country)
leaflet(meta_deploy) %>%
addTiles() %>%
addPolygons(fillColor = ~Country)
runApp()
data_col <- read.csv("data/merged_col_01_02_03.csv", header=T, sep = ",")
data_col <- read.csv("data/col_merged_01_02_03.csv", header=T, sep = ",")
library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
shiny::runApp()
meta_deploy <- read.csv("data/meta_deployments.csv", header=T, sep = ",", stringsAsFactors = F)
View(meta_deploy)
meta_deploy <- meta_deploy[-1, ]
meta_col <- read.csv("data/meta_sampleID.csv", header=T, sep = ",", stringsAsFactors = F)
View(meta_col)
View(data_col)
runApp()
data_col[data_col$dply_num == 1]
data_col[data_col$dply_num == 1, ]
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~sample_type_type,
type = 'bar')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~sample_type,
type = 'bar')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
type = 'bar')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
y = ~col_sample_type,
type = 'bar')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
y = ~col_sample_type,
type = 'bar') %>%
layout(showlegend = F,
xaxis = list(range = c(0,10),
title = ""))
runApp()
plot_ly(data_col[data_col$dply_num == input$deployments, ],
x = ~col_sample_type,
# y = ~col_sample_type,
type = 'histogramm')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
# y = ~col_sample_type,
type = 'histogramm')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
# y = ~col_sample_type,
type = 'histogram')
plot_ly(data_col[data_col$dply_num == 1, ],
x = ~col_sample_type,
type = 'histogram') %>%
layout(showlegend = F,
xaxis = list(range = c(0,10),
title = ""))
runApp()
runApp()
as.data.frame(count(data_col[data_col$dply_num == input$deployments, ],
sample_type_name))
runApp()
meta_col[, 1:2]
left_join(data_col, meta_col[, 1:2], by = c("col_sample_type" = "ID"))
data_col <- left_join(data_col, meta_col[, 1:2], by = c("col_sample_type" = "ID"))
runApp()
runApp()
runApp()
data_col_depl
data_col$deployment
table(data_col$dply_num)
data_col_depl <- data.frame(table(data_col$dply_num))
data_col_depl
data_col_depl$Var1 <- as.numeric(as.character(data_col_depl$Var1))
data_col_depl
data_col_depl <- left_join(data_col_depl, meta_deploy[, 1:2], by = c("Var1" = "ID"))
data_col_depl
plot_ly(data_col_depl, values = ~Freq, labels = ~Country, type = "pie")
runApp()
runApp()
data_col_depl
sum(data_col_depl$Freq)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
